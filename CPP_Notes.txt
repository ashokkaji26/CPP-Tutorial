

-----------------------------------------------------------------------------------------------------------------------------------------------

1.What is Text ??


 In the context of computers and programming, "text" generally refers to a sequence of characters that can be read and understood by humans.
 These characters can include letters, numbers, symbols, and spaces. Text is a fundamental data type used to represent and store information in a human-readable format.

Here's a breakdown of what "text" implies:

1. Sequence of Characters: Text is essentially an ordered collection of characters.

2. Human-Readable: The primary purpose of text is to convey information that humans can easily understand.

3. Encoding: Text is usually encoded using character encoding standards like ASCII, UTF-8, or UTF-16, which assign numerical values to each character.

4. Data Type: In programming, text is often represented using the "string" data type. A string is a sequence of characters enclosed in quotation marks (e.g., "Hello, world!").

Examples of Text:

1. "This is a sample text."
2. "12345" (even though it contains numbers, it's still text if treated as a string)
3. "Hello, how are you?"
4. "~!@#$%^&*"

In essence, "text" is the form of data that represents human language and symbols in a way that computers can store and process, and humans can read and understand.

-----------------------------------------------------------------------------------------------------------------------------------------------

2. How computers processes texts??


Yes, that's essentially correct. When a computer processes text, it internally represents each character as a numerical value according to a specific character encoding standard, such as ASCII or UTF-8.

Here's a more detailed explanation:

1. Character Encoding: Character encoding is a system that maps characters to numerical values (code points).
 ASCII is one of the earliest and simplest character encodings, but it only supports a limited set of characters (mainly English letters, numbers, and symbols).
  UTF-8 is a more modern and widely used encoding that supports a much broader range of characters, including those from different languages.

2. Representation: When a computer stores or processes text, it doesn't store the characters directly. 
Instead, it stores the numerical code points that correspond to those characters according to the chosen encoding.
 For example, if the computer is using ASCII encoding, the character 'A' would be stored as the number 65.

3. Rendering: When the computer needs to display text on the screen or print it on paper,
 it retrieves the numerical code points and uses the character encoding to look up the corresponding characters.
  It then uses a font to render the characters visually.



-----------------------------------------------------------------------------------------------------------------------------------------------

3. How computer processes text "I love you, 143 ?" ? 


Okay, let's break down how a computer would process the text "I love you, 143 ?" using the ASCII encoding system. Remember that ASCII assigns a unique number to each character.

Here's a character-by-character breakdown:

Character	ASCII Value
I	73
space 32
l	108
o	111
v	118
e	101
space 32
y	121
o	111
u	117
,	44
space 32
1	49
4	52
3	51
space 32
?	63


Process:

1. Input: The computer receives the text "I love you, 143 ?".

2. Encoding: The computer iterates through each character in the text. For each character, it looks up its corresponding ASCII value.

3. Representation: The text is then represented internally as a sequence of these ASCII values: 73, 32, 108, 111, 118, 101, 32, 121, 111, 117, 44, 32, 49, 52, 51, 32, 63 

4. Storage/Processing: These numerical values are stored in the computer's memory. The computer can then perform various operations on this data, such as displaying it on the screen, transmitting it over a network, or analyzing it.

5. Output (Display): When the computer needs to display the text, it retrieves the sequence of ASCII values. For each value, it looks up the corresponding character in the ASCII table and renders that character on the screen using a font.

So, the text "I love you, 143 ?" is internally represented as a sequence of numbers, each representing a character according to the ASCII standard.


-----------------------------------------------------------------------------------------------------------------------------------------------

4.  numbers as text V/S numbers as numerical values. 


--> Great question! It's important to distinguish between how computers handle numbers as text versus numbers as numerical values.

** Numbers as Text (Characters):

--> As we've discussed, when numbers are treated as text (i.e., part of a string), each digit is encoded as a separate character using a character encoding like ASCII.
For example, the string "123" would be stored as the ASCII values for '1', '2', and '3' (49, 50, and 51, respectively). 
In this case, the computer doesn't interpret "123" as the numerical value one hundred and twenty-three; it simply sees a sequence of three characters.

** Numbers as Numerical Values:

--> When you want the computer to perform mathematical operations or treat something as a numerical quantity, you use numerical data types like int, float, or double. In this case, the number is stored in a completely different format, using binary representation.

Here's a simplified overview of how it works for integers:

a. Binary Representation: Computers use the binary number system (base-2), which consists of only two digits: 0 and 1. Every number can be represented as a combination of 0s and 1s.

b. Storage: An integer variable (e.g., int x = 123;) is allocated a certain number of bits in memory (e.g., 32 bits). The numerical value is then converted into its binary equivalent and stored in those bits.

For example, the decimal number 123 is equivalent to the binary number 01111011. This binary representation would be stored in the allocated memory.

c. Processing: When the computer performs arithmetic operations (addition, subtraction, multiplication, etc.) on these numerical values, it operates directly on the binary representations using the rules of binary arithmetic.
Floating-Point Numbers:

--> Floating-point numbers (like float and double) are stored using a more complex format based on scientific notation. They consist of three parts:

a. Sign: Indicates whether the number is positive or negative.

b. Mantissa (Significand): Represents the significant digits of the number.

c. Exponent: Indicates the power of 2 by which the mantissa should be multiplied.

--> This representation allows computers to store a wide range of numbers, including very large and very small values, but with limited precision.

In Summary:

--> Textual Numbers (Strings): Each digit is encoded as a character using ASCII or a similar encoding. The computer treats them as symbols, not numerical values.
Numerical Values (int, float, double): Numbers are converted into binary format and stored in memory according to the data type. The computer can then perform mathematical operations directly on these binary representations.
The key difference is that textual numbers are for representing human-readable characters, while numerical values are for performing calculations and mathematical operations.




-----------------------------------------------------------------------------------------------------------------------------------------------

5. Operators:- 

  1. Compound Assignment Operators:- 
                                  Compound Assignment Operators are just a shorthand way of performing operations on a variable and assigning the result back to the variable.

 x -= 5        (Subtracts 5 from x and assigns the result back to x)
 x *= 3        (Multiplies x by 3 and assigns the result back to x)
 x /= 3        (Divides x by 3 and assigns the result back to x)
 x %= 3        (Finds the remainder when x is divided by 3 and assigns the result back to x)

-----------------------------------------------------------------------------------------------------------------------------------------------

6. Why use brackets around condition?

 --> it is important to enclose the condition in brackets else C++ will throw an error.

 -->  The following code will throw an error:-

 #include <iostream>
 using namespace std;

 int main() {
    int height1 = 15;
    int height2 = 13;
    cout<<height1 != height2;
 }

 --> This is because the << operator has higher precedence than the != operator. So, the compiler will try to evaluate cout << height1 first, and then compare the result with height2 which is not what we want.

 --> The corrected code is:-

 #include <iostream>
 using namespace std;

 int main() {
    int height1 = 15;
    int height2 = 13;
    cout<<(height1 != height2);
 }
-----------------------------------------------------------------------------------------------------------------------------------------------

7. Operator precedence:- 

        Postfix operators: ++, --
        Parentheses: ()
        Unary operators: +, -, !, ~, ++, --, (type)
        Multiplicative operators: *, /, %
        Additive operators: +, -
        Relational operators: <, >, <=, >=
        Equality operators: ==, !=
        Logical AND operator: &&
        Logical OR operator: ||
        Assignment operators: =, +=, -= 


-----------------------------------------------------------------------------------------------------------------------------------------------

8. String data type:- A string variable contains a collection of characters surrounded by double quotes.

  --> Concatenation:- The '+' sign can be used between strings to add them together to make a new string.
                      This is called concatenation.

  --> C++ uses the + sign for both addition and concatenation.

        a. Numbers are added.
        b. Strings are concatenated.
        c. We cannot mix the two.

  *** String functions:- 
            a. append()
            b. length()
            c. substr(starting index, no. of characters``) is a string function which is used to extract a substring from a given string.

-----------------------------------------------------------------------------------------------------------------------------------------------

9. conditional statements:- many times a program need to take different actions based on some conditions. 

    --> If statement :- We use if statement to check for a condition.
    --> If the condition is true we execute the code inside if block.
    --> If the condition is not ture then we execute the code inside else block.

    --> int age = 18;
        if(age >= 18){
          cout<< "You can vote!";
        }else{
          cout<< "You can't vote!";
        }


  **** If-Else can handle multiple conditions using "else-if".

 --> if (condition1) {
       // Code to execute if condition1 is true
      } else if (condition2) {
        // Code to execute if condition1 is false AND condition2 is true
      } else if (condition3) {
        // Code to execute if condition1 and condition2 are false AND condition3 is true
      } else {
       // Code to execute if ALL conditions are false
      }

 --> The 'else if' keyword means "if the previous conditions were not true, then try this condition".

 --> The 'else' keyword includes anything which isn't included in the previous conditions.`

  --> C++ relies on curly brackets ('{' in the beginning and '}' at the end) to know what part of code is inside the if part of the code and what is not. Whatever is inside curly brackets is considered as one block of code.

  --> When writing an if or else if you don't mention a block of code using curly brackets it executes only the first statement of the if or else section.
-----------------------------------------------------------------------------------------------------------------------------------------------


10. how to use switch statements instead of multiple if-else statements??

  --> In many situations we need to perforn different actions based on a specific value.
  --> switch allows us to evaluate a single variable or expression and then execute the matching block of code.
  --> Each option is represented by a case label followed by the code for that case. 
  --> After executing the code for a matching case, we use the break keyword to exit the switch block.
  --> Without the break statement the program would fall through and execute the code for the next cases even if they don't match.
  --> The default case ensures the program handles unexpected input gracefully.
  --> switch statements provide a clean and organized way to handle multiple values of a single variable. 

  Q. when to use a switch statement instead of an if-else chain?
     --> Use a switch statement when:
        1. You have a single variable you want to compare to multiple constant values.
           The switch statement provides a cleaner and more readable way to handle multiple comparisons against the same variable.
        2. All the conditions depend on the same variable. If you're checking different conditions based on different variables,
           if-else is generally more appropriate.
  
  --> char operator = '+';
      switch ( variable or expression ){
        case '-': 
          cout << "Subtraction" <<endl;
          break;
        case '+':
          cout << "Addition" <<endl;
          break;
        case '*':
          cout << "Product" <<endl;
          break;
        case '/':
          cout<< "division" <<endl;
          break;
        default:
          cout << "Unknown Operator" <<endl;
      }


  Q. Can switch handle complex conditions?

    --> No, switch statements are not designed to handle complex conditions. They are specifically for checking a single variable against a series of constant values.

        In C++, the case labels in a switch statement must be constant expressions (e.g., literal values, enum constants, or constexpr variables). 
        You cannot use variables, ranges, or complex boolean expressions (like x > 5 && y < 10) directly in the case labels.

        If you need to evaluate complex conditions, an if-else if-else chain is the more appropriate choice.

 Q. Can we use strings in switch statement ?

  --> No, you cannot use strings in a switch statement in C++. The switch statement only works with integral or enumeration types. 
      If you need to compare strings, you should use if-else statements instead.
-----------------------------------------------------------------------------------------------------------------------------------------------

11.  Debugging :- Finding and finxing errors in code.

 Q. What is a bug ?
  --> A bug is an error that causes our program to generate an unexpected output that is different from our expected output or no output. 

    a. CE - Compilation error / Syntax error
    RE - Run-time error
    WA - Wrong answer / Logical error
    TLE - Time limit exceeded


-----------------------------------------------------------------------------------------------------------------------------------------------

12. Array :- 1. Array is a variable, & it is used to store multiple values in a single variable.
             2. An array is a data structure that allow us to store multiple values in a single variable, making it efficient to manage
                large collection of data.

  --> To declare an array:-
                            1. define the variable data type.
                            2. Specify the name of array followed by square brackets.
                            3. In square brackets, specify the no. of elements it should store.

  Q. Can array size be changed later ?
    --> No, No, the size of an array in C++ is fixed at the time of its declaration. Once you define an array with a specific size, 
        you cannot change its size later during the execution of the program. If you need a data structure that can dynamically grow or shrink, you should use std::vector instead of an array.

  
  ** important things to keep in mind about array:- 
      1. Arrays have a fixed size.
      2. If we need an array of a different size, we have to declare a new one.
      3. Arrays can only hold elements of the same data type.

  ** Accessing elements of an Array:- 
    --> Arrays use indexes, which are the positions of each element in the array.
    --> In c++, index starts at 0.


  Q. what does contiguous block of memory means?
    --> When you declare an array, the compiler finds a contiguous block of memory large enough to hold all the elements of the array. 
        So, if you declare an array of 5 integers, the compiler finds 5 consecutive memory locations (each large enough to hold an integer) and assigns them to your array.

        This contiguity is crucial for efficient array access because it allows the compiler to quickly calculate the address of any element by simply adding an offset to the starting address of the array, 
        as we discussed earlier. If the memory wasn't contiguous, the compiler would need to use a more complex lookup mechanism to find each element, which would slow things down.

  *** Q. Why does indexing start from 0?
        --> The reason indexing starts from 0 in C++ (and many other programming languages) is rooted in how memory addresses are calculated.

        --> Imagine an array as a contiguous block of memory. The array's name actually represents the memory address of the very first element in the array.

        --> When you access an element using arr[i], what the compiler does is:

          1. Take the starting address of the array (arr).
          2. Add "i * the size of each element" to that address. This gives you the memory address of the element you want.
          3. Go to that memory address and retrieve the value.
          4. So, arr[0] is really saying "give me the value at the starting address arr + 0 * (size of an element)", which is the first element. 
            arr[1] means "give me the value at the starting address arr + 1 * (size of an element)", which is the second element, and so on.

      ---> If indexing started at 1, the calculation would be slightly more complex (and potentially less efficient). 
           Starting at 0 makes the address arithmetic cleaner and more direct.

      ** sizeof() operator returns the size of a variable or data type in bytes.
      --> sizeof(arr);    it will give size of arr in bytes.
      --> sizeof(arr) / sizeof(arr[0]);    it will give the no. of elements in array.

-----------------------------------------------------------------------------------------------------------------------------------------------


13. Control structures:- In programming, control structures are rules that determines the order of execution of code.

    --> A Control Structure in programming is a rule or framework that determines the order of execution of code. 
        It controls the flow of a program and decides which part of the code runs when and how many times.

    ** Types of Control Structures:-

              1. Sequential control:- The code runs line by line from top to bottom.
                  --> No special conditions or loops are used.

              2. Selection control - conditional statements
                  --> Used for decision making(if-else,switch).
                  --> if a condition is true, one block of code runs; otherwise, another block runs.

              3. Iteration control - loops
                  --> Iteration refers to executing a block of code repeatedly.
                  --> Iteration control used when we need to repeat a task multiple times.

-----------------------------------------------------------------------------------------------------------------------------------------------

14. Loops:- Loops can execute a block of code as long as a specified contion is reached.

    1. While loop:- The while loop, loops through a block of code as long as a specified condition is true.
          --> while (condition) {
            // code to be executed
          }

  ** Important points to keep in mind while using loops:-

    a. When using a loop you have to think about three things - initialisation, condition and update statement.
    b. So think about what we initialise the variable with? i.e., Where does the sequence start form?
    c. Think about what the condition will be? i.e., Till where is the sequence going?
    d. Also think about how the variable will be updating after every iteration. How the terms in the sequence are changing?

    2. Do-while loop :- The do-while loop is a type of while loop.
        --> This loop will execute the code block once, before checking if the condition is true, 
            then it will repeat the loop as long as the condition is true.
        --> do {
          // code to be executed
        } while(condition);

    ** When to use do/while:

      a. When you need to execute a block of code at least once, regardless of the initial condition.
      b. When you want to perform some action before checking the condition for the first time.
          When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop

    3. For loop:- When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop

        --> for(initialisation; condition; updation){
          // code to be executed
        }

    ** Break statement inside Loops:- break statement is used to terminate the iteration process and exit the loop.
      --> break statement only exits loop or switch in which it is contained.

    ** Continue statement :- The Continue statement skips one iteration in the loop, if a specified condition occurs, and Continues with next iterations in loop.

    Q. Can continue work outside loops?
      --> No, continue cannot work outside of loops (e.g., for, while, or do-while loops). The continue statement is specifically designed to alter the flow of control within a loop, 
          skipping the remaining part of the current iteration and proceeding to the next iteration. Using it outside a loop will result in a compilation error.

    4. For each loop :- This loop is used exclusively to loop through elements in an array.

        --> for (array_type loop_variable : array_name ) {
          // code to be executed.
        }

        --> Here the loop variable holds the value of each element of the array one by one.

        --> The for-each loop simplifies iterating through each element of an array (or other collections) without needing to manage indices. 
        -->Here's a breakdown:

             a. Initialization: The loop starts at the first element of the array.
             b. Assignment: The value of the current element is assigned to the loop_variable.
             c. Execution: The code block inside the loop is executed, using the current value stored in the loop_variable.
             d. Iteration: The loop moves to the next element in the array, and steps 2 and 3 are repeated.
             e. Termination: The loop continues until all elements in the array have been processed.
-----------------------------------------------------------------------------------------------------------------------------------------------

15. Nested Loops :- Nested loops are a powerful programming contruct where one loop is placed inside another.

  Q. Why use nested loops for patterns?
    --> Nested loops are commonly used for printing patterns becasue they allow us to control both the rows and 
        columns of the patterns. The outer loop typically handles the rows, while the inner loop handles the elements
        within each row. By varying the number of iterations and the output within the inner loop based on the current row and column, you can create different patterns.

        
-----------------------------------------------------------------------------------------------------------------------------------------------

16. Function :- A function can do one of two things.

                1. Print values directly inside the function. => void functions.

                  --> void calculate_Sum (int a, int b) {
                    int sum = a + b;
                    cout << sum <<endl;
                  }

                2. Return a value that can be used later.  => return functions.
                  --> To return a value, we must specify the data type of the value being returned.

                  int calculate_Sum ( int a, int b) {
                    int sum = a + b;
                    return sum;
                  }

                  --> How do we use this returned value ??

                    --> Option_1 : To print the returned valule directly by wrapping the function call inside a cout statement.
                        int main() {
                          cout << calculate_Sum(3,4) << endl;
                        }

                    --> Option_2 : To store the returned value in a variable. allowing us to use the value elsewhere in the program.
                        int main() {
                          int sum;
                          sum = calculate_Sum(3,4);
                          int avg = sum / 2;
                          cout << avg <<endl;
                        }

            ** Note:- functions allow us to break down a complex program into smaller, manageable modules.
                      Each function can represent a specific task or functionality.
                      Once defined, functions can be reused in different parts of the program or even in different programs, promoting code reuse and saving development time.


            ** Anatomy of a function :- 
                a. return_type: The type of value the function returns. It can be int, double, char, void, etc. If the function doesn’t return a value, void is used.
                b. function_name: Name of the function (should be descriptive).
                c. parameters: Inputs that the function accepts, enclosed in parentheses and separated by commas (can be optional). Each parameter has a type, followed by the parameter name, e.g., int x.
                d. Function body: Code block enclosed in braces { } where the function performs its task.
                e. return: Optional statement to return a value from the function. If the return type is void, no return statement is needed, unless you want to exit the function prematurely.

            ** To exit any function :- 
              1. return :- If the function's return_type is void, you use return; without any value to exit the function.
              2. return 0 :- If the function's return_type is int, then return 0; is a common practice to indicate successful execution of the program. You can return any integer value.


          *** Variable scope :- Scope in Cpp can be broadly categorized into two types: global scope and local scope.

            1. Global scope :- 
              a. Variables and functions defined outside of any function or class have global scope.
              b. Theseentities can be accessed from anywhere in the code, both inside and outside functions or classes.

            2. Local scope :- 
              a. Variables defined within a function have local scope, meaning they are accessible only within that function.
              b. Local scope is limited to the function where the variable is defined.

            ** Accessing Variables from Different Scopes:- 
              a. A function can access variables in its local scope, as well as variables in the global scope.
              b. However, a local variable will take precedence over a global variable if they have the same name.

            ** Predefined functions :- Predefined functions are ready to use and can be directly incorporated into your C++ programs without needing to create their definitions.

              --> Here are some common categories of predefined functions in C++:-
                 
                a. Input/Output Functions:
                    You would have to include iostream package to use these functions cout: Used to print formatted output to the console.
                    cin: Used to read formatted input from the console.
                    setprecision : Used to set the ios library floating point precision based on the precision specified as the parameter to this method.

                b.  Mathematical Functions:
                    You would have to include cmath package to use these functions sqrt(): Calculates the square root of a number.
                    abs(): Calculates the absolute value of a number.
                    pow(): Calculates the power of a number.
                    ceil(), floor(): Round a number to the nearest integer.

                c.  Memory operators:
                    new : Allocate memory dynamically.
                    delete : Deallocate memory.

                d.  Time Functions:
                    time(): Get the current time.
                    ctime(): Convert time to a string.
                    difftime(): Calculate the difference between two times.

                e.  File Handling Functions:
                    fopen(), fclose(): Open and close files.
                    fread(), fwrite(): Read and write data from/to files.


      ** Inline function:- n C++, an inline function is a function that is expanded in line when it is called. This means that instead of performing a typical function call, where the control is transferred to the function's code, the compiler replaces the function call with the actual code of the function. This can potentially make the program run faster by eliminating the overhead associated with function calls.

        ** Why Use Inline Functions?
          --> a. Performance Improvement: For small functions, the overhead of a function call can be significant. Inline functions eliminate this overhead.
              b. Readability and Maintainability: By using inline functions, you can keep your code clean and readable while avoiding the drawbacks of macros.

        ** How to Define an Inline Function?
           --> To define an inline function, you use the inline keyword before the function definition.
           --> inline returnType functionName(parameters) {
                                                              // function body
                                                          }

         ** When to Use Inline Functions :- 
                a. Small Functions: Inline functions are most effective for small, frequently called functions. If the function is large, the overhead of function calls becomes negligible compared to the execution time of the function's code.
                b. Performance-Critical Code: Use inline functions in performance-critical sections of your code where every bit of optimization matters.

         ** When Not to Use Inline Functions :- 
                a. Large Functions: If a function is large, inlining it can increase the size of the binary significantly, potentially causing issues with cache performance and memory usage.
                b. Recursive Functions: Inline functions should not be used for recursive functions, as inlining would cause an infinite inlining loop.

         ** Important Point to Remember :- 
          --> Inline is a Request, Not a Command: The inline keyword is a request to the compiler, not a command. The compiler may choose to ignore the request if it decides that inlining is not beneficial.


     ** function overloading :- Read about it.
     
                                                 

-----------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------
V
-----------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------
V
-----------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------
V
-----------------------------------------------------------------------------------------------------------------------------------------------